{
	"info": {
		"_postman_id": "767a4a62-7528-4318-b14b-dd13555eacc8",
		"name": "store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14936700"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Create product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"pm.test(\"Product name is orange\", function () {\r",
									"    pm.expect(jsonData.name).to.eq(\"orange\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\":{\r",
									"    \"id\": {\r",
									"        \"type\": \"number\"\r",
									"    },\r",
									"    \"name\":{\r",
									"        \"type\": \"string\"\r",
									"    },\r",
									"    \"price\":{\r",
									"        \"type\": \"number\"\r",
									"    },\r",
									"    \"sku\":{\r",
									"        \"type\": \"number\"\r",
									"    },\r",
									"    \"description\":{\r",
									"        \"type\": \"string\"\r",
									"    }\r",
									"    },\r",
									"    \"required\":[\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"        \"price\",\r",
									"        \"sku\",\r",
									"        \"description\"\r",
									"    ]\r",
									"};\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"orange\",\r\n    \"price\": 8,\r\n    \"sku\": 123321123,\r\n    \"description\": \"wouh\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "List products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"pm.test(\"Count products: \"+jsonData.length, function() {\r",
									"    pm.expect(jsonData.length).to.be.eq(4);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "List sorting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"All name are ascending\", function () {\r",
									"    const response = pm.response.json();\r",
									"    const isAscending = response.map(item => item.name).every((current, index, ids) => index === 0 || current >= ids[index-1]);\r",
									"    pm.expect(isAscending).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?sortOrder=ASC&sortKey=name",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List sorting failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body has error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.contain(\"is not a valid sort key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header include text/html\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?sortOrder=ASC&sortKey=qwerty",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "qwerty"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List products pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"pm.test(\"Count products = \"+jsonData.length, function () {\r",
									"    pm.expect(jsonData.length).to.eq(2);\r",
									"});\r",
									"pm.test(\"Content-Type header include application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/?page=1&pageSize=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"\r",
									"pm.test(\"Product is apple and have price 30\", () =>{\r",
									"    const product=\"apple\";\r",
									"    const price=30;\r",
									"\r",
									"    pm.expect(jsonData.name).to.eql(product);\r",
									"    pm.expect(jsonData.price).to.eql(price);\r",
									"});\r",
									"\r",
									"pm.test(\"Product has id 3\",()=>{\r",
									"    pm.expect(jsonData.id).eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\":{\r",
									"    \"id\": {\r",
									"        \"type\": \"number\"\r",
									"    },\r",
									"    \"name\":{\r",
									"        \"type\": \"string\"\r",
									"    },\r",
									"    \"price\":{\r",
									"        \"type\": \"number\"\r",
									"    },\r",
									"    \"sku\":{\r",
									"        \"type\": \"number\"\r",
									"    },\r",
									"    \"description\":{\r",
									"        \"type\": \"string\"\r",
									"    }\r",
									"    },\r",
									"    \"required\":[\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"        \"price\",\r",
									"        \"sku\",\r",
									"        \"description\"\r",
									"    ]\r",
									"};\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Single product not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"{}\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/25",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"25"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"pm.test(\"Product name is banana with price 155\", function () {\r",
									"    const product=\"banana\";\r",
									"    const price=155;\r",
									"    pm.expect(jsonData.name).to.eq(product);\r",
									"    pm.expect(jsonData.price).to.eq(price);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"banana\",\r\n    \"price\": 155,\r\n    \"sku\": 123321123,\r\n    \"description\": \"changed description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upsdate product failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Body has error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.contain(\"Item not found with IDundefined\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header include text/html\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 15,\r\n    \"name\": \"banana\",\r\n    \"price\": 155\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"pm.test(\"Product name is banana\", function () {\r",
									"    const product=\"banana\";\r",
									"    pm.expect(jsonData.name).to.eq(product);\r",
									"});\r",
									"\r",
									"pm.test(\"Product id is 4\", function () {\r",
									"    pm.expect(jsonData.id).to.eq(4);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"pm.test(\"Order name is new order5\", function () {\r",
									"    pm.expect(jsonData.name).to.eq(\"new order5\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"     \"type\": \"object\",\r",
									"    \"properties\":{\r",
									"    \"name\": {\r",
									"        \"type\": \"string\"\r",
									"    },\r",
									"    \"sku\":{\r",
									"        \"type\": \"number\"\r",
									"    },\r",
									"    \"id\":{\r",
									"        \"type\": \"number\"\r",
									"    }\r",
									"    },\r",
									"    \"required\":[\r",
									"        \"name\",\r",
									"        \"sku\",\r",
									"        \"id\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"   pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"new order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "List orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"pm.test(\"Count orders: \"+jsonData.length, function() {\r",
									"    pm.expect(jsonData.length).to.eql(4);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "List sorting orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"All name are ascending\", function () {\r",
									"    const response = pm.response.json();\r",
									"    const isAscending = response.map(item => item.name).every((current, index, ids) => index === 0 || current >= ids[index-1]);\r",
									"    pm.expect(isAscending).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders?sortOrder=ASC&sortKey=name",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List sorting failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body has error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.contain(\"is not a valid sort key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header include text/html\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders?sortOrder=ASC&sortKey=qwerty",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "qwerty"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List orders pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"pm.test(\"Count orders = \"+jsonData.length, function () {\r",
									"    pm.expect(jsonData.length).to.eq(3);\r",
									"});\r",
									"pm.test(\"Content-Type header include application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders?page=1&pageSize=3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"\r",
									"pm.test(\"Order name is order2\", () =>{\r",
									"    const name=\"order2\";\r",
									"    pm.expect(jsonData.name).to.eql(name);\r",
									"});\r",
									"\r",
									"pm.test(\"Order has id 2\",()=>{\r",
									"    pm.expect(jsonData.id).eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\":{\r",
									"    \"id\": {\r",
									"        \"type\": \"number\"\r",
									"    },\r",
									"    \"name\":{\r",
									"        \"type\": \"string\"\r",
									"    },\r",
									"    \"sku\":{\r",
									"        \"type\": \"number\"\r",
									"    }\r",
									"    },\r",
									"    \"required\":[\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"        \"sku\",\r",
									"    ]\r",
									"};\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single order not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"{}\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/25",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"25"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"pm.test(\"Order name is order5\", function () {\r",
									"    const name=\"order5\";\r",
									"    pm.expect(jsonData.name).to.eq(name);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Body has error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.contain(\"Item not found with IDundefined\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header include text/html\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"order\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"pm.test(\"Order name is order5\", function () {\r",
									"    const name=\"order5\";\r",
									"    pm.expect(jsonData.name).to.eq(name);\r",
									"});\r",
									"\r",
									"pm.test(\"Order id is 4\", function () {\r",
									"    pm.expect(jsonData.id).to.eq(4);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"pm.test(\"User name is Dream Real\", function () {\r",
									"    const first_name=\"Dream\";\r",
									"    const last_name=\"Real\";\r",
									"    pm.expect(jsonData.firstName).to.eq(first_name);\r",
									"    pm.expect(jsonData.lastName).to.eq(last_name);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"     \"type\": \"object\",\r",
									"    \"properties\":{\r",
									"    \"firstName\": {\r",
									"        \"type\": \"string\"\r",
									"    },\r",
									"    \"lastName\":{\r",
									"        \"type\": \"string\"\r",
									"    },\r",
									"    \"email\":{\r",
									"        \"type\": \"string\"\r",
									"    },\r",
									"    \"dateOfBirth\":{\r",
									"        \"type\": \"string\"\r",
									"    },\r",
									"    \"emailVerified\":{\r",
									"        \"type\": \"boolean\"\r",
									"    },\r",
									"    \"signUpDate\":{\r",
									"        \"type\": \"string\"\r",
									"    },\r",
									"    \"status\":{\r",
									"        \"type\": \"string\"\r",
									"    },\r",
									"    \"level\":{\r",
									"        \"type\": \"string\"\r",
									"    },\r",
									"    \"id\":{\r",
									"        \"type\": \"number\"\r",
									"    }\r",
									"    },\r",
									"    \"required\":[\r",
									"        \"firstName\", \"lastName\", \"email\",\"dateOfBirth\", \"emailVerified\",\"signUpDate\",\"status\",\"level\",\"id\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"   pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Dream\",\r\n    \"lastName\": \"Real\",\r\n    \"email\": \"dream.real@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "List users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"pm.test(\"Count users: \"+jsonData.length, function() {\r",
									"    pm.expect(jsonData.length).to.eql(10);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Contains 'active' in status\", function(){\r",
									"    _.each(jsonData, (item)=>{\r",
									"        pm.expect(item.status).contains(\"active\");\r",
									"    })\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "List sorting users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"All id are descending\", function () {\r",
									"    const response = pm.response.json();\r",
									"    const isDescending = response.map(item => item.id).every((current, index, ids) => index === response.length-1 || current <= ids[index]);\r",
									"    pm.expect(isDescending).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?sortOrder=DESC&sortKey=id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "DESC"
								},
								{
									"key": "sortKey",
									"value": "id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List sorting failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body has error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.contain(\"is not a valid sort key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header include text/html\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?sortOrder=DESC&sortKey=name",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "DESC"
								},
								{
									"key": "sortKey",
									"value": "name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"\r",
									"pm.test(\"User name is Vesta Smith\", () =>{\r",
									"    const first_name=\"Vesta\";\r",
									"    const last_name=\"Smith\";\r",
									"    pm.expect(jsonData.firstName).to.eql(first_name);\r",
									"    pm.expect(jsonData.lastName).to.eql(last_name);\r",
									"});\r",
									"\r",
									"pm.test(\"Order has id 4\",()=>{\r",
									"    pm.expect(jsonData.id).eql(4);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "List users pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"pm.test(\"Count users = \"+jsonData.length, function () {\r",
									"    pm.expect(jsonData.length).to.eq(2);\r",
									"});\r",
									"pm.test(\"Content-Type header include application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?page=2&pageSize=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								},
								{
									"key": "pageSize",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Single user not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"{}\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/25",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"25"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"pm.test(\"User name is Ilon Mask\", function () {\r",
									"    const first_name=\"Ilon\";\r",
									"    const last_name=\"Mask\";\r",
									"    pm.expect(jsonData.firstName).to.eq(first_name);\r",
									"    pm.expect(jsonData.lastName).to.eql(last_name);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ilon\",\r\n    \"lastName\": \"Mask\",\r\n    \"email\": \"ilon.mask@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\",\r\n    \"id\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Body has error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.contain(\"Item not found with IDundefined\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header include text/html\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Kete\",\r\n    \"lastName\": \"Brown\",\r\n    \"email\": \"kate.brown@gmail.com\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"pm.test(\"Order name is Ilon Mask\", function () {\r",
									"    const first_name=\"Ilon\";\r",
									"    const last_name=\"Mask\";\r",
									"    pm.expect(jsonData.firstName).to.eq(first_name);\r",
									"    pm.expect(jsonData.lastName).to.eq(last_name);\r",
									"});\r",
									"\r",
									"pm.test(\"User id is 10\", function () {\r",
									"    pm.expect(jsonData.id).to.eq(10);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"10"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}